(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var FileNavigator;

FileNavigator = function(file, options) {
  var decode, getProgress, lastPosition, navigator, readChunk, self, size;
  self = this;
  size = file.size;
  file.navigator = this;
  lastPosition = 0;
  getProgress = function() {
    var progress;
    if (!size || size === 0) {
      return 0;
    }
    progress = parseInt(100 * lastPosition / size);
    if (progress > 100) {
      return 100;
    } else {
      return progress;
    }
  };
  readChunk = function(offset, length, callback) {
    var reader;
    lastPosition = offset + length;
    reader = new FileReader;
    reader.onloadend = function(progress) {
      var buffer;
      buffer = void 0;
      if (reader.result) {
        buffer = new Int8Array(reader.result, 0);
        buffer.slice = buffer.subarray;
      }
      callback(progress.err, buffer, progress.loaded);
    };
    reader.readAsArrayBuffer(file.slice(offset, offset + length));
  };
  decode = function(buffer, callback) {
    var reader;
    reader = new FileReader;
    reader.onloadend = function(progress) {
      callback(progress.currentTarget.result);
    };
    reader.readAsText(new Blob([buffer]));
  };
  navigator = new LineNavigator(readChunk, decode, options);
  self.getMilestones = navigator.getMilestones;
  self.readSomeLines = function(index, callback) {
    navigator.readSomeLines(index, function(err, index, lines, eof) {
      callback(err, index, lines, eof, getProgress());
    });
  };
  self.readLines = function(index, count, callback) {
    navigator.readLines(index, count, function(err, index, lines, eof) {
      callback(err, index, lines, eof, getProgress());
    });
  };
  self.find = navigator.find;
  self.findAll = navigator.findAll;
  self.getSize = function(callback) {
    return callback(file ? file.size : 0);
  };
};

module.exports = FileNavigator;



},{}],2:[function(require,module,exports){
var FileNavigator, es_client, field_names, file, hosts, indexToStartWith, index_name, init_ui, linesReadHandler, lines_in_batch, navigator, options, prepare_json, process_lines, readFile, send_to_server, show_progress, type_name;

FileNavigator = require('./filenavigator.coffee');

show_progress = function(progress, number) {
  var bar;
  bar = $(".progress-bar");
  bar.css("width", progress + "%");
  bar.text(progress + "%");
  $('#counter').text(number);
  return console.log(number + " : lines " + progress);
};

hosts = "localhost:9200";

index_name = "govwiki";

type_name = "govs";

es_client = void 0;

field_names = [];

navigator = void 0;

file = void 0;

lines_in_batch = 5000;

indexToStartWith = 0;

options = {
  chunkSize: 1024 * 16
};

init_ui = function() {
  file = document.getElementById('chooseFileButton').files[0];
  return show_progress(0, 0);
};

prepare_json = function(index, lines) {
  var field_values, i, instruct, j, len, line, record, res;
  if (!lines) {
    return;
  }
  res = [];
  if (index === 0) {
    field_names = lines[0].replace(/"/g, '').split(',');
    lines.shift();
  }
  for (i = j = 0, len = lines.length; j < len; i = ++j) {
    line = lines[i];
    field_values = line.split(',');
    record = CSV.parse(line, {
      header: field_names,
      cellDelimiter: ','
    });
    instruct = {
      index: {
        _index: index_name,
        _type: type_name,
        _id: i
      }
    };
    res.push(instruct);
    res.push(record);
  }
  return res;
};

send_to_server = function(index, lines, eof, progress, json) {
  setTimeout((function(_this) {
    return function() {
      show_progress(progress, index + lines.length);
      console.log(" " + lines.length + " lines sent");
      if (eof) {
        return;
      }
      navigator.readLines(index + lines.length, lines_in_batch, linesReadHandler);
    };
  })(this), 1000);
};

process_lines = function(index, lines, eof, progress) {
  var json;
  json = prepare_json(index, lines);
  return send_to_server(index, lines, eof, progress, json);
};

linesReadHandler = function(err, index, lines, eof, progress) {
  if (err) {
    return;
  }
  process_lines(index, lines, eof, progress);
};

readFile = function() {
  hosts = $('#hosts').val();
  index_name = $('#indexName').val();
  type_name = $('#typeName').val();
  es_client = new $.es.Client({
    hosts: hosts
  });
  navigator = new FileNavigator(file, options);
  navigator.readLines(indexToStartWith, lines_in_batch, linesReadHandler);
};

$('#chooseFileButton').change((function(_this) {
  return function() {
    return init_ui();
  };
})(this));

$('#readFileButton').click((function(_this) {
  return function() {
    return readFile();
  };
})(this));



},{"./filenavigator.coffee":1}]},{},[2])
//# sourceMappingURL=data:application/json;base64,
