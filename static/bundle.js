(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var FileNavigator;

FileNavigator = function(file, options) {
  var decode, getProgress, lastPosition, navigator, readChunk, self, size;
  self = this;
  size = file.size;
  file.navigator = this;
  lastPosition = 0;
  getProgress = function() {
    var progress;
    if (!size || size === 0) {
      return 0;
    }
    progress = parseInt(100 * lastPosition / size);
    if (progress > 100) {
      return 100;
    } else {
      return progress;
    }
  };
  readChunk = function(offset, length, callback) {
    var reader;
    lastPosition = offset + length;
    reader = new FileReader;
    reader.onloadend = function(progress) {
      var buffer;
      buffer = void 0;
      if (reader.result) {
        buffer = new Int8Array(reader.result, 0);
        buffer.slice = buffer.subarray;
      }
      callback(progress.err, buffer, progress.loaded);
    };
    reader.readAsArrayBuffer(file.slice(offset, offset + length));
  };
  decode = function(buffer, callback) {
    var reader;
    reader = new FileReader;
    reader.onloadend = function(progress) {
      callback(progress.currentTarget.result);
    };
    reader.readAsText(new Blob([buffer]));
  };
  navigator = new LineNavigator(readChunk, decode, options);
  self.getMilestones = navigator.getMilestones;
  self.readSomeLines = function(index, callback) {
    navigator.readSomeLines(index, function(err, index, lines, eof) {
      callback(err, index, lines, eof, getProgress());
    });
  };
  self.readLines = function(index, count, callback) {
    navigator.readLines(index, count, function(err, index, lines, eof) {
      callback(err, index, lines, eof, getProgress());
    });
  };
  self.find = navigator.find;
  self.findAll = navigator.findAll;
  self.getSize = function(callback) {
    return callback(file ? file.size : 0);
  };
};

module.exports = FileNavigator;



},{}],2:[function(require,module,exports){
var FileNavigator, build_head_table2, cast, es_client, field_names, file, get_field_types, hosts, index_name, init_ui, linesReadHandler, lines_in_batch, max_number_of_records, navigator, options, prepare_json, readFile, read_lines, send_json_to_server, show_progress, type_name;

FileNavigator = require('./filenavigator.coffee');

hosts = "localhost:9200";

index_name = "govwiki";

type_name = "govs";

es_client = void 0;

field_names = [];

navigator = void 0;

file = void 0;

lines_in_batch = 10000;

max_number_of_records = 2000000000;

options = {
  chunkSize: 1024 * 512 * 1
};

cast = void 0;

show_progress = function(progress, number) {
  var bar;
  bar = $(".progress-bar");
  bar.css("width", progress + "%");
  bar.text(progress + "%");
  $('#counter').text(number);
  return console.log(number + " : lines " + progress + "%");
};

build_head_table2 = function() {
  var container, head_navigator;
  container = $('#head_table_container');
  container.html("");
  head_navigator = new FileNavigator(file, {
    chunkSize: 1024 * 128
  });
  head_navigator.readLines(0, 3, function(err, index, lines, eof, progress) {
    var build_id_radio, build_table_body, build_table_row, build_type_selector, s;
    if (err) {
      return;
    }
    build_id_radio = function(name, i) {
      return "<input type=\"radio\" name=\"id_field\" value=\"" + name + "\">";
    };
    build_type_selector = function(name, i) {
      var if_number, if_string, v;
      if_string = function(v) {
        if (!v) {
          return "selected";
        }
        if (('' + v).indexOf('"') > -1) {
          return "selected";
        }
        return "";
      };
      if_number = function(v) {
        if (if_string(v) === "selected") {
          return "";
        } else {
          return "selected";
        }
      };
      v = lines[1].split(',')[i];
      return "<select class=\"type-selector form-control\" style=\"width:100px;\">\n  <option value=\"String\" " + (if_string(v)) + ">String</option>\n  <option value=\"Number\" " + (if_number(v)) + ">Number</option>\n  <option value=\"Boolean\">Boolean</option>\n</select> ";
    };
    build_table_row = function(name, i) {
      return "<tr>\n  <td>" + (build_id_radio(name, i)) + "</td>\n  <td>" + name + "</td>\n  <td style=\"width:120px;\">" + (build_type_selector(name, i)) + "</td>\n  <td>" + (lines[1].split(',')[i]) + "</td>\n</tr>";
    };
    build_table_body = function() {
      var i, name;
      return ((function() {
        var j, len, ref, results;
        ref = lines[0].replace(/"/g, '').split(',');
        results = [];
        for (i = j = 0, len = ref.length; j < len; i = ++j) {
          name = ref[i];
          results.push(build_table_row(name, i));
        }
        return results;
      })()).join('');
    };
    s = "<table class=\"table table-condensed\">\n  <thead>\n    <tr>\n      <th style=\"width:70px;\"><input type=\"radio\" name=\"id_field\" value=\"\" checked>&nbsp;_id</th>\n      <th style=\"width:250px;\">name</th>\n      <th style=\"width:120px;\">type</th>\n      <th>sample</th>\n    </tr>\n  </thead>\n  <tbody>\n    " + (build_table_body()) + "\n  </tbody>\n</table>";
    container.html(s);
  });
};

init_ui = function() {
  file = document.getElementById('chooseFileButton').files[0];
  show_progress(0, 0);
  build_head_table2();
  $('.step-3').show();
  return $('.step-4').hide();
};

prepare_json = function(index, lines) {
  var field_values, i, j, len, line, operation, record, res;
  if (!lines) {
    return;
  }
  res = [];
  if (index === 0) {
    field_names = lines[0].replace(/"/g, '').split(',');
    lines.shift();
  }
  for (i = j = 0, len = lines.length; j < len; i = ++j) {
    line = lines[i];
    if (index + i > max_number_of_records) {
      return res;
    }
    operation = {
      index: {
        _index: index_name,
        _type: type_name,
        _id: index + i
      }
    };
    field_values = line.split(',');
    record = CSV.parse(line, {
      header: field_names,
      cellDelimiter: ',',
      cast: cast
    })[0];
    res.push(operation);
    res.push(record);
  }
  return res;
};

read_lines = function(i) {
  navigator.readSomeLines(i, linesReadHandler);
};

send_json_to_server = function(index, lines, eof, progress, json) {
  if (index > max_number_of_records) {
    return;
  }
  if (json.length === 0) {
    return;
  }
  es_client.bulk({
    body: json
  }, (function(_this) {
    return function(err, resp) {
      if (err) {
        alert("Sorry, " + err.message);
        console.log(err);
        return;
      } else {
        show_progress(progress, index + json.length / 2);
        console.log(" " + (json.length / 2) + " lines sent");
        if (eof) {
          return;
        }
        read_lines(index + json.length / 2);
        return;
      }
    };
  })(this));
};

linesReadHandler = function(err, index, lines, eof, progress) {
  var json;
  if (err) {
    return;
  }
  if (index > max_number_of_records) {
    return;
  }
  json = prepare_json(index, lines);
  send_json_to_server(index, lines, eof, progress, json);
};

get_field_types = function() {
  var sel, sels, types;
  sels = $('.type-selector');
  types = (function() {
    var j, len, results;
    results = [];
    for (j = 0, len = sels.length; j < len; j++) {
      sel = sels[j];
      results.push(sel.value);
    }
    return results;
  })();
  return types;
};

readFile = function() {
  hosts = $('#hosts').val();
  index_name = $('#indexName').val();
  type_name = $('#typeName').val();
  es_client = new $.es.Client({
    hosts: hosts
  });
  cast = get_field_types();
  navigator = new FileNavigator(file, options);
  read_lines(0);
  $('.step-4').show();
};

$('#chooseFileButton').change((function(_this) {
  return function() {
    return init_ui();
  };
})(this));

$('#readFileButton').click((function(_this) {
  return function() {
    return readFile();
  };
})(this));

$('.step-3').hide();

$('.step-4').hide();



},{"./filenavigator.coffee":1}]},{},[2])
//# sourceMappingURL=data:application/json;base64,
