(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var FileNavigator;

FileNavigator = function(file, options) {
  var decode, getProgress, lastPosition, navigator, readChunk, self, size;
  self = this;
  size = file.size;
  file.navigator = this;
  lastPosition = 0;
  getProgress = function() {
    var progress;
    if (!size || size === 0) {
      return 0;
    }
    progress = parseInt(100 * lastPosition / size);
    if (progress > 100) {
      return 100;
    } else {
      return progress;
    }
  };
  readChunk = function(offset, length, callback) {
    var reader;
    lastPosition = offset + length;
    reader = new FileReader;
    reader.onloadend = function(progress) {
      var buffer;
      buffer = void 0;
      if (reader.result) {
        buffer = new Int8Array(reader.result, 0);
        buffer.slice = buffer.subarray;
      }
      callback(progress.err, buffer, progress.loaded);
    };
    reader.readAsArrayBuffer(file.slice(offset, offset + length));
  };
  decode = function(buffer, callback) {
    var reader;
    reader = new FileReader;
    reader.onloadend = function(progress) {
      callback(progress.currentTarget.result);
    };
    reader.readAsText(new Blob([buffer]));
  };
  navigator = new LineNavigator(readChunk, decode, options);
  self.getMilestones = navigator.getMilestones;
  self.readSomeLines = function(index, callback) {
    navigator.readSomeLines(index, function(err, index, lines, eof) {
      callback(err, index, lines, eof, getProgress());
    });
  };
  self.readLines = function(index, count, callback) {
    navigator.readLines(index, count, function(err, index, lines, eof) {
      callback(err, index, lines, eof, getProgress());
    });
  };
  self.find = navigator.find;
  self.findAll = navigator.findAll;
  self.getSize = function(callback) {
    return callback(file ? file.size : 0);
  };
};

module.exports = FileNavigator;



},{}],2:[function(require,module,exports){
var FileNavigator, build_head_table2, cast, clear, convert_lines_to_json2, es_client, field_names, file, get_field_types, hosts, index_name, init_ui, linesReadHandler2, lines_in_batch, max_number_of_records, navigator, options, readFile, read_lines2, send_json_to_server2, show_progress, status, type_name, worker;

FileNavigator = require('./filenavigator.coffee');

hosts = "localhost:9200";

index_name = "govwiki";

type_name = "govs";

es_client = void 0;

field_names = [];

navigator = void 0;

file = void 0;

lines_in_batch = 10000;

max_number_of_records = 2000000000;

options = {
  chunkSize: 1024 * 512 * 1
};

cast = void 0;

worker = void 0;

show_progress = function(progress, number) {
  var bar;
  bar = $(".progress-bar");
  bar.css("width", progress + "%");
  bar.text(progress + "%");
  $('#counter').text(number);
  return console.log(number + " : lines " + progress + "%");
};

build_head_table2 = function() {
  var container, head_navigator;
  container = $('#head_table_container');
  container.html("");
  head_navigator = new FileNavigator(file, {
    chunkSize: 1024 * 128
  });
  head_navigator.readLines(0, 3, function(err, index, lines, eof, progress) {
    var build_id_radio, build_table_body, build_table_row, build_type_selector, s;
    if (err) {
      return;
    }
    build_id_radio = function(name, i) {
      return "<input type=\"radio\" name=\"id_field\" value=\"" + name + "\">";
    };
    build_type_selector = function(name, i) {
      var if_number, if_string, v;
      if_string = function(v) {
        if (!v) {
          return "selected";
        }
        if (('' + v).indexOf('"') > -1) {
          return "selected";
        }
        return "";
      };
      if_number = function(v) {
        if (if_string(v) === "selected") {
          return "";
        } else {
          return "selected";
        }
      };
      v = lines[1].split(',')[i];
      return "<select class=\"type-selector form-control\" style=\"width:100px;\">\n  <option value=\"String\" " + (if_string(v)) + ">String</option>\n  <option value=\"Number\" " + (if_number(v)) + ">Number</option>\n  <option value=\"Boolean\">Boolean</option>\n</select> ";
    };
    build_table_row = function(name, i) {
      return "<tr>\n  <td class=\"first-column\">" + (build_id_radio(name, i)) + "</td>\n  <td>" + name + "</td>\n  <td style=\"width:120px;\">" + (build_type_selector(name, i)) + "</td>\n  <td>" + (lines[1].split(',')[i]) + "</td>\n</tr>";
    };
    build_table_body = function() {
      var i, name;
      return ((function() {
        var j, len, ref, results;
        ref = lines[0].replace(/"/g, '').split(',');
        results = [];
        for (i = j = 0, len = ref.length; j < len; i = ++j) {
          name = ref[i];
          results.push(build_table_row(name, i));
        }
        return results;
      })()).join('');
    };
    s = "<table class=\"table table-condensed\">\n  <thead>\n    <tr>\n      <th class=\"first-column\" style=\"width:70px;\"><input type=\"radio\" name=\"id_field\" value=\"\" checked>&nbsp;_id</th>\n      <th style=\"width:250px;\">name</th>\n      <th style=\"width:120px;\">type</th>\n      <th>sample</th>\n    </tr>\n  </thead>\n  <tbody>\n    " + (build_table_body()) + "\n  </tbody>\n</table>";
    container.html(s);
  });
};

init_ui = function() {
  file = document.getElementById('chooseFileButton').files[0];
  clear(worker);
  show_progress(0, 0);
  build_head_table2();
  $('.step-3').show();
  return $('.step-4').hide();
};

convert_lines_to_json2 = function(prm) {
  var field_values, i, j, len, line, operation, record, ref, res;
  importScripts('js/csv.js');
  if (!prm.lines) {
    return;
  }
  res = [];
  if (prm.index === 0) {
    prm.field_names = prm.lines[0].replace(/"/g, '').split(',');
    prm.lines.shift();
  }
  ref = prm.lines;
  for (i = j = 0, len = ref.length; j < len; i = ++j) {
    line = ref[i];
    if (prm.index + i > prm.max_number_of_records) {
      return res;
    }
    operation = {
      index: {
        _index: prm.index_name,
        _type: prm.type_name,
        _id: prm.index + i
      }
    };
    field_values = line.split(',');
    record = CSV.parse(line, {
      header: prm.field_names,
      cellDelimiter: ',',
      cast: prm.cast
    })[0];
    res.push(operation);
    res.push(record);
  }
  return res;
};

read_lines2 = function(i) {
  status('reading text');
  navigator.readSomeLines(i, linesReadHandler2);
};

send_json_to_server2 = function(index, lines, eof, progress, json) {
  if (index > max_number_of_records) {
    return;
  }
  if (json.length === 0) {
    return;
  }
  status((json.length / 2) + " sending");
  es_client.bulk({
    body: json
  }, (function(_this) {
    return function(err, resp) {
      if (err) {
        clear(worker);
        alert("Sorry, " + err.message);
        console.log(err);
        return;
      } else {
        status("");
        show_progress(progress, index + json.length / 2);
        if (eof) {
          clear(worker);
          return;
        }
        read_lines2(index + json.length / 2);
        return;
      }
    };
  })(this));
};

linesReadHandler2 = function(err, index, lines, eof, progress) {
  if (err) {
    clear(worker);
    return;
  }
  if (index > max_number_of_records) {
    clear(worker);
    return;
  }
  status(lines.length + " converting");
  worker.convert_lines_to_json2({
    index: index,
    lines: lines,
    field_names: field_names,
    max_number_of_records: max_number_of_records,
    index_name: index_name,
    type_name: type_name,
    cast: cast
  }).then(function(json) {
    send_json_to_server2(index, lines, eof, progress, json);
  });
};

clear = function(worker) {
  if (worker) {
    return worker.close();
  }
};

get_field_types = function() {
  var sel, sels, types;
  sels = $('.type-selector');
  types = (function() {
    var j, len, results;
    results = [];
    for (j = 0, len = sels.length; j < len; j++) {
      sel = sels[j];
      results.push(sel.value);
    }
    return results;
  })();
  return types;
};

readFile = function() {
  clear(worker);
  worker = cw({
    convert_lines_to_json2: convert_lines_to_json2
  });
  hosts = $('#hosts').val();
  index_name = $('#indexName').val();
  type_name = $('#typeName').val();
  es_client = new $.es.Client({
    hosts: hosts
  });
  cast = get_field_types();
  navigator = new FileNavigator(file, options);
  read_lines2(0);
  $('.step-4').show();
};

status = function(text) {
  return $('#status').text(text);
};

$('#chooseFileButton').change((function(_this) {
  return function() {
    return init_ui();
  };
})(this));

$('#readFileButton').click((function(_this) {
  return function() {
    return readFile();
  };
})(this));

$('.step-3').hide();

$('.step-4').hide();



},{"./filenavigator.coffee":1}]},{},[2])
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCIvaG9tZS92YWdyYW50L2VsYXN0aWNzZWFyY2gtZGF0YS1sb2FkZXIvY29mZmVlL2ZpbGVuYXZpZ2F0b3IuY29mZmVlIiwiL2hvbWUvdmFncmFudC9lbGFzdGljc2VhcmNoLWRhdGEtbG9hZGVyL2NvZmZlZS9tYWluLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQ1FBLElBQUEsYUFBQTs7QUFBQSxhQUFBLEdBQWdCLFNBQUMsSUFBRCxFQUFPLE9BQVAsR0FBQTtBQUNkLE1BQUEsbUVBQUE7QUFBQSxFQUFBLElBQUEsR0FBTyxJQUFQLENBQUE7QUFBQSxFQUNBLElBQUEsR0FBTyxJQUFJLENBQUMsSUFEWixDQUFBO0FBQUEsRUFFQSxJQUFJLENBQUMsU0FBTCxHQUFpQixJQUZqQixDQUFBO0FBQUEsRUFJQSxZQUFBLEdBQWUsQ0FKZixDQUFBO0FBQUEsRUFNQSxXQUFBLEdBQWMsU0FBQSxHQUFBO0FBQ1osUUFBQSxRQUFBO0FBQUEsSUFBQSxJQUFHLENBQUEsSUFBQSxJQUFTLElBQUEsS0FBUSxDQUFwQjtBQUNFLGFBQU8sQ0FBUCxDQURGO0tBQUE7QUFBQSxJQUVBLFFBQUEsR0FBVyxRQUFBLENBQVMsR0FBQSxHQUFNLFlBQU4sR0FBcUIsSUFBOUIsQ0FGWCxDQUFBO0FBR0EsSUFBQSxJQUFHLFFBQUEsR0FBVyxHQUFkO2FBQXVCLElBQXZCO0tBQUEsTUFBQTthQUFnQyxTQUFoQztLQUpZO0VBQUEsQ0FOZCxDQUFBO0FBQUEsRUFnQkEsU0FBQSxHQUFZLFNBQUMsTUFBRCxFQUFTLE1BQVQsRUFBaUIsUUFBakIsR0FBQTtBQUNWLFFBQUEsTUFBQTtBQUFBLElBQUEsWUFBQSxHQUFlLE1BQUEsR0FBUyxNQUF4QixDQUFBO0FBQUEsSUFDQSxNQUFBLEdBQVMsR0FBQSxDQUFBLFVBRFQsQ0FBQTtBQUFBLElBR0EsTUFBTSxD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b3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCJcbiMgQWxsb3dzIHRvIG5hdmlnYXRlIGdpdmVuIHNvdXJjZXMgbGluZXMsIHNhdmluZyBtaWxlc3RvbmVzIHRvIG9wdGltaXplIHJhbmRvbSByZWFkaW5nXG4jIG9wdGlvbnMgPSB7XG4jICAgICAgICBtaWxlc3RvbmVzOiBbXSwgICAgICAgICAvLyBvcHRpb25hbDogYXJyYXkgb2YgbWlsZXN0b25lcywgd2hpY2ggY2FuIGJlIG9idGFpbmVkIGJ5IGdldE1pbGVzdG9uZXMoKSBtZXRob2QgYW5kIHN0b3JlZCB0byBzcGVlZCB1cCByYW5kb20gcmVhZGluZyBpbiBmdXR1cmVcbiMgICAgICAgIGNodW5rU2l6ZTogMTAyNCAqIDQsICAgIC8vIG9wdGlvbmFsOiBzaXplIG9mIGNodW5rIHRvIHJlYWQgYXQgb25jZVxuIyB9XG5cblxuRmlsZU5hdmlnYXRvciA9IChmaWxlLCBvcHRpb25zKSAtPlxuICBzZWxmID0gdGhpc1xuICBzaXplID0gZmlsZS5zaXplXG4gIGZpbGUubmF2aWdhdG9yID0gdGhpc1xuICAjIHJldXNlIG1pbGVzdG9uZXMgbGF0ZXJcbiAgbGFzdFBvc2l0aW9uID0gMFxuXG4gIGdldFByb2dyZXNzID0gLT5cbiAgICBpZiAhc2l6ZSBvciBzaXplID09IDBcbiAgICAgIHJldHVybiAwXG4gICAgcHJvZ3Jlc3MgPSBwYXJzZUludCgxMDAgKiBsYXN0UG9zaXRpb24gLyBzaXplKVxuICAgIGlmIHByb2dyZXNzID4gMTAwIHRoZW4gMTAwIGVsc2UgcHJvZ3Jlc3NcblxuXG5cbiAgIyBjYWxsYmFjayhlcnIsIGJ1ZmZlciwgYnl0ZXNSZWFkKVxuXG4gIHJlYWRDaHVuayA9IChvZmZzZXQsIGxlbmd0aCwgY2FsbGJhY2spIC0+XG4gICAgbGFzdFBvc2l0aW9uID0gb2Zmc2V0ICsgbGVuZ3RoXG4gICAgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXJcblxuICAgIHJlYWRlci5vbmxvYWRlbmQgPSAocHJvZ3Jlc3MpIC0+XG4gICAgICBidWZmZXIgPSB1bmRlZmluZWRcbiAgICAgIGlmIHJlYWRlci5yZXN1bHRcbiAgICAgICAgYnVmZmVyID0gbmV3IEludDhBcnJheShyZWFkZXIucmVzdWx0LCAwKVxuICAgICAgICBidWZmZXIuc2xpY2UgPSBidWZmZXIuc3ViYXJyYXlcbiAgICAgIGNhbGxiYWNrIHByb2dyZXNzLmVyciwgYnVmZmVyLCBwcm9ncmVzcy5sb2FkZWRcbiAgICAgIHJldHVyblxuXG4gICAgcmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyIGZpbGUuc2xpY2Uob2Zmc2V0LCBvZmZzZXQgKyBsZW5ndGgpXG4gICAgcmV0dXJuXG5cblxuXG4gICMgY2FsbGJhY2soc3RyKTtcblxuICBkZWNvZGUgPSAoYnVmZmVyLCBjYWxsYmFjaykgLT5cbiAgICByZWFkZXIgPSBuZXcgRmlsZVJlYWRlclxuXG4gICAgcmVhZGVyLm9ubG9hZGVuZCA9IChwcm9ncmVzcykgLT5cbiAgICAgIGNhbGxiYWNrIHByb2dyZXNzLmN1cnJlbnRUYXJnZXQucmVzdWx0XG4gICAgICByZXR1cm5cblxuICAgIHJlYWRlci5yZWFkQXNUZXh0IG5ldyBCbG9iKFsgYnVmZmVyIF0pXG4gICAgcmV0dXJuXG5cbiAgbmF2aWdhdG9yID0gbmV3IExpbmVOYXZpZ2F0b3IocmVhZENodW5rLCBkZWNvZGUsIG9wdGlvbnMpXG5cblxuXG5cbiAgIyBSZXR1cm5zIGN1cnJlbnQgbWlsZXN0b25lcywgdG8gc3BlZWQgdXAgZmlsZSByYW5kb20gcmVhZGluZyBpbiBmdXR1cmVcblxuICBzZWxmLmdldE1pbGVzdG9uZXMgPSBuYXZpZ2F0b3IuZ2V0TWlsZXN0b25lc1xuXG5cblxuICAjIFJlYWRzIG9wdGltYWwgbnVtYmVyIG9mIGxpbmVzXG4gICMgY2FsbGJhY2s6IGZ1bmN0aW9uKGVyciwgaW5kZXgsIGxpbmVzLCBlb2YsIHByb2dyZXNzKVxuICAjIHdoZXJlIHByb2dyZXNzIGlzIDAtMTAwICUgb2YgZmlsZSBcblxuICBzZWxmLnJlYWRTb21lTGluZXMgPSAoaW5kZXgsIGNhbGxiYWNrKSAtPlxuICAgIG5hdmlnYXRvci5yZWFkU29tZUxpbmVzIGluZGV4LCAoZXJyLCBpbmRleCwgbGluZXMsIGVvZikgLT5cbiAgICAgIGNhbGxiYWNrIGVyciwgaW5kZXgsIGxpbmVzLCBlb2YsIGdldFByb2dyZXNzKClcbiAgICAgIHJldHVyblxuICAgIHJldHVyblxuXG5cblxuICAjIFJlYWRzIGV4YWN0IGFtb3VudCBvZiBsaW5lc1xuICAjIGNhbGxiYWNrOiBmdW5jdGlvbihlcnIsIGluZGV4LCBsaW5lcywgZW9mLCBwcm9ncmVzcylcbiAgIyB3aGVyZSBwcm9ncmVzcyBpcyAwLTEwMCAlIG9mIGZpbGUgXG5cbiAgc2VsZi5yZWFkTGluZXMgPSAoaW5kZXgsIGNvdW50LCBjYWxsYmFjaykgLT5cbiAgICBuYXZpZ2F0b3IucmVhZExpbmVzIGluZGV4LCBjb3VudCwgKGVyciwgaW5kZXgsIGxpbmVzLCBlb2YpIC0+XG4gICAgICBjYWxsYmFjayBlcnIsIGluZGV4LCBsaW5lcywgZW9mLCBnZXRQcm9ncmVzcygpXG4gICAgICByZXR1cm5cbiAgICByZXR1cm5cblxuXG5cbiAgIyBGaW5kcyBuZXh0IG9jY3VycmVuY2Ugb2YgcmVndWxhciBleHByZXNzaW9uIHN0YXJ0aW5nIGZyb20gZ2l2ZW4gaW5kZXhcbiAgIyBjYWxsYmFjazogZnVuY3Rpb24oZXJyLCBpbmRleCwgbWF0Y2h7b2Zmc2V0LCBsZW5ndGgsIGxpbmV9KVxuICAjIG9mZnNldCBhbmQgbGVuZ3RoIGFyZSBiZWxvbmcgdG8gbWF0Y2ggaW5zaWRlIGxpbmVcblxuICBzZWxmLmZpbmQgPSBuYXZpZ2F0b3IuZmluZFxuXG5cblxuICAjIEZpbmRzIGFsbCBvY2N1cnJlbmNlcyBvZiByZWd1bGFyIGV4cHJlc3Npb24gc3RhcnRpbmcgZnJvbSBnaXZlbiBpbmRleFxuICAjIGNhbGxiYWNrOiBmdW5jdGlvbihlcnIsIGluZGV4LCBsaW1pdEhpdCwgcmVzdWx0cylcbiAgIyByZXN1bHQgaXMgYW4gYXJyYXkgb2Ygb2JqZWN0cyB3aXRoIGZvbGxvd2luZyBzdHJ1Y3R1cmUge2luZGV4LCBvZmZzZXQsIGxlbmd0aCwgbGluZX1cbiAgIyBvZmZzZXQgYW5kIGxlbmd0aCBhcmUgYmVsb25nIHRvIG1hdGNoIGluc2lkZSBsaW5lXG5cbiAgc2VsZi5maW5kQWxsID0gbmF2aWdhdG9yLmZpbmRBbGxcblxuXG4gICMgUmV0dXJucyBzaXplIG9mIGZpbGUgaW4gYnl0ZXNcbiAgIyBjYWxsYmFjazogZnVuY3Rpb24oc2l6ZSlcblxuICBzZWxmLmdldFNpemUgPSAoY2FsbGJhY2spIC0+XG4gICAgY2FsbGJhY2sgaWYgZmlsZSB0aGVuIGZpbGUuc2l6ZSBlbHNlIDBcblxuICByZXR1cm5cblxuXG5tb2R1bGUuZXhwb3J0cz1GaWxlTmF2aWdhdG9yXG4iLCJGaWxlTmF2aWdhdG9yID0gcmVxdWlyZSAnLi9maWxlbmF2aWdhdG9yLmNvZmZlZSdcbiMgR2xvYmFsc1xuaG9zdHMgPSBcImxvY2FsaG9zdDo5MjAwXCJcbmluZGV4X25hbWUgPSBcImdvdndpa2lcIlxudHlwZV9uYW1lID0gXCJnb3ZzXCJcbmVzX2NsaWVudCA9IHVuZGVmaW5lZFxuZmllbGRfbmFtZXMgPSBbXVxuXG5uYXZpZ2F0b3IgPSB1bmRlZmluZWRcbmZpbGUgPSB1bmRlZmluZWRcbmxpbmVzX2luX2JhdGNoID0xMDAwMFxubWF4X251bWJlcl9vZl9yZWNvcmRzPTIwMDAwMDAwMDBcblxub3B0aW9ucyA9IHtjaHVua1NpemU6IDEwMjQgKiA1MTIgKiAxfSAjIGNodW5rU2l6ZTogMTAyNCAqIDEwMjQgKiA0XG5jYXN0ID0gdW5kZWZpbmVkXG5cbndvcmtlcj11bmRlZmluZWRcblxuIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG5cblxuc2hvd19wcm9ncmVzcyA9IChwcm9ncmVzcyxudW1iZXIpIC0+XG4gIGJhcj0kKFwiLnByb2dyZXNzLWJhclwiKVxuICBiYXIuY3NzIFwid2lkdGhcIiwgXCIje3Byb2dyZXNzfSVcIlxuICBiYXIudGV4dCBcIiN7cHJvZ3Jlc3N9JVwiXG4gICQoJyNjb3VudGVyJykudGV4dCBudW1iZXJcbiAgY29uc29sZS5sb2cgXCIje251bWJlcn0gOiBsaW5lcyAje3Byb2dyZXNzfSVcIlxuXG5cblxuYnVpbGRfaGVhZF90YWJsZTIgPSgpIC0+XG4gIGNvbnRhaW5lciA9ICQoJyNoZWFkX3RhYmxlX2NvbnRhaW5lcicpXG4gIGNvbnRhaW5lci5odG1sIFwiXCJcbiAgaGVhZF9uYXZpZ2F0b3IgPSBuZXcgRmlsZU5hdmlnYXRvciBmaWxlLCAge2NodW5rU2l6ZTogMTAyNCAqIDEyOCB9XG4gIGhlYWRfbmF2aWdhdG9yLnJlYWRMaW5lcyAwLCAzLCAoZXJyLCBpbmRleCwgbGluZXMsIGVvZiwgcHJvZ3Jlc3MpIC0+XG5cbiAgICBpZiBlcnIgdGhlbiAgcmV0dXJuXG4gICAgXG4gICAgYnVpbGRfaWRfcmFkaW8gPSAobmFtZSxpKSAtPlxuICAgICAgXCJcIlwiXG4gICAgICA8aW5wdXQgdHlwZT1cInJhZGlvXCIgbmFtZT1cImlkX2ZpZWxkXCIgdmFsdWU9XCIje25hbWV9XCI+XG4gICAgICBcIlwiXCJcblxuICAgIGJ1aWxkX3R5cGVfc2VsZWN0b3IgPSAobmFtZSxpKSAtPlxuICAgICAgXG4gICAgICBpZl9zdHJpbmcgPSh2KSAtPlxuICAgICAgICBpZiBub3QgdiB0aGVuIHJldHVybiBcInNlbGVjdGVkXCJcbiAgICAgICAgaWYgKCcnK3YpLmluZGV4T2YoJ1wiJykgPiAtMSB0aGVuIHJldHVybiBcInNlbGVjdGVkXCJcbiAgICAgICAgXCJcIlxuICAgICAgXG4gICAgICBpZl9udW1iZXIgPSh2KSAtPlxuICAgICAgICBpZiBpZl9zdHJpbmcodikgaXMgXCJzZWxlY3RlZFwiICB0aGVuIFwiXCIgZWxzZSBcInNlbGVjdGVkXCJcbiAgICAgIFxuICAgICAgdiA9IGxpbmVzWzFdLnNwbGl0KCcsJylbaV1cbiAgICAgIFwiXCJcIlxuICAgICAgPHNlbGVjdCBjbGFzcz1cInR5cGUtc2VsZWN0b3IgZm9ybS1jb250cm9sXCIgc3R5bGU9XCJ3aWR0aDoxMDBweDtcIj5cbiAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIlN0cmluZ1wiICN7aWZfc3RyaW5nKHYpfT5TdHJpbmc8L29wdGlvbj5cbiAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIk51bWJlclwiICN7aWZfbnVtYmVyKHYpfT5OdW1iZXI8L29wdGlvbj5cbiAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIkJvb2xlYW5cIj5Cb29sZWFuPC9vcHRpb24+XG4gICAgICA8L3NlbGVjdD4gXG4gICAgICBcIlwiXCJcblxuICAgIGJ1aWxkX3RhYmxlX3JvdyA9IChuYW1lLGkpIC0+XG4gICAgICBcIlwiXCJcbiAgICAgIDx0cj5cbiAgICAgICAgPHRkIGNsYXNzPVwiZmlyc3QtY29sdW1uXCI+I3tidWlsZF9pZF9yYWRpbyhuYW1lLGkpfTwvdGQ+XG4gICAgICAgIDx0ZD4je25hbWV9PC90ZD5cbiAgICAgICAgPHRkIHN0eWxlPVwid2lkdGg6MTIwcHg7XCI+I3tidWlsZF90eXBlX3NlbGVjdG9yKG5hbWUsaSl9PC90ZD5cbiAgICAgICAgPHRkPiN7bGluZXNbMV0uc3BsaXQoJywnKVtpXX08L3RkPlxuICAgICAgPC90cj5cbiAgICAgIFwiXCJcIlxuICAgIFxuXG4gICAgYnVpbGRfdGFibGVfYm9keSA9IC0+XG4gICAgICAoYnVpbGRfdGFibGVfcm93KG5hbWUsaSkgZm9yIG5hbWUsIGkgaW4gbGluZXNbMF0ucmVwbGFjZSgvXCIvZywnJykuc3BsaXQoJywnKSlcbiAgICAgIC5qb2luKCcnKVxuICAgIFxuICAgIFxuICAgIHMgPSBcIlwiXCJcbiAgICA8dGFibGUgY2xhc3M9XCJ0YWJsZSB0YWJsZS1jb25kZW5zZWRcIj5cbiAgICAgIDx0aGVhZD5cbiAgICAgICAgPHRyPlxuICAgICAgICAgIDx0aCBjbGFzcz1cImZpcnN0LWNvbHVtblwiIHN0eWxlPVwid2lkdGg6NzBweDtcIj48aW5wdXQgdHlwZT1cInJhZGlvXCIgbmFtZT1cImlkX2ZpZWxkXCIgdmFsdWU9XCJcIiBjaGVja2VkPiZuYnNwO19pZDwvdGg+XG4gICAgICAgICAgPHRoIHN0eWxlPVwid2lkdGg6MjUwcHg7XCI+bmFtZTwvdGg+XG4gICAgICAgICAgPHRoIHN0eWxlPVwid2lkdGg6MTIwcHg7XCI+dHlwZTwvdGg+XG4gICAgICAgICAgPHRoPnNhbXBsZTwvdGg+XG4gICAgICAgIDwvdHI+XG4gICAgICA8L3RoZWFkPlxuICAgICAgPHRib2R5PlxuICAgICAgICAje2J1aWxkX3RhYmxlX2JvZHkoKX1cbiAgICAgIDwvdGJvZHk+XG4gICAgPC90YWJsZT5cbiAgICBcIlwiXCJcblxuICAgIGNvbnRhaW5lci5odG1sIHNcbiAgICByZXR1cm5cblxuXG4gIHJldHVyblxuXG4jIHByZXBhcmUgR1VJIGFmdGVyIHRoZSB1c2VyIHNlbGVjdHMgYSBmaWxlXG5pbml0X3VpID0gLT5cbiAgZmlsZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjaG9vc2VGaWxlQnV0dG9uJykuZmlsZXNbMF1cbiAgY2xlYXIgd29ya2VyXG4gIHNob3dfcHJvZ3Jlc3MgMCwwXG4gIGJ1aWxkX2hlYWRfdGFibGUyKClcbiAgJCgnLnN0ZXAtMycpLnNob3coKVxuICAkKCcuc3RlcC00JykuaGlkZSgpXG5cbiAgXG4jIGNvbnZlcnRzIHRleHQgdG8gSlNPTi4gUHJvY2Vzc29yIGNvbnN1bWluZyBvcGVyYXRpb24uIFRPRE86IG1vdmUgdG8gYSB3b3JrZXIuXG4jIHBybSBpcyB7IGluZGV4OmluZGV4LCBsaW5lczpsaW5lcywgZmllbGRfbmFtZXM6ZmllbGRfbmFtZXMsIFxuIyBtYXhfbnVtYmVyX29mX3JlY29yZHM6bWF4X251bWJlcl9vZl9yZWNvcmRzLCBpbmRleF9uYW1lOmluZGV4X25hbWUsIHR5cGVfbmFtZTp0eXBlX25hbWUsIGNhc3Q6Y2FzdCB9XG5jb252ZXJ0X2xpbmVzX3RvX2pzb24yID0ocHJtKSAtPlxuICBpbXBvcnRTY3JpcHRzKCdqcy9jc3YuanMnKVxuICBpZiBub3QgcHJtLmxpbmVzIHRoZW4gcmV0dXJuXG4gIHJlcyA9IFtdXG4gIGlmIHBybS5pbmRleCBpcyAwXG4gICAgcHJtLmZpZWxkX25hbWVzID0gcHJtLmxpbmVzWzBdLnJlcGxhY2UoL1wiL2csJycpLnNwbGl0ICcsJ1xuICAgIHBybS5saW5lcy5zaGlmdCgpXG5cbiAgZm9yIGxpbmUsaSBpbiBwcm0ubGluZXNcbiAgICBpZiBwcm0uaW5kZXgraSA+IHBybS5tYXhfbnVtYmVyX29mX3JlY29yZHMgdGhlbiByZXR1cm4gcmVzXG4gICAgb3BlcmF0aW9uID0geyBpbmRleDogIHsgX2luZGV4OiBwcm0uaW5kZXhfbmFtZSwgX3R5cGU6IHBybS50eXBlX25hbWUsIF9pZDogcHJtLmluZGV4K2kgfSB9XG4gICAgZmllbGRfdmFsdWVzID0gbGluZS5zcGxpdCAnLCdcbiAgICAjcmVjb3JkID0gXy5vYmplY3QgZmllbGRfbmFtZXMsIGZpZWxkX3ZhbHVlc1xuICAgIHJlY29yZCA9IENTVi5wYXJzZShsaW5lLCB7aGVhZGVyOiBwcm0uZmllbGRfbmFtZXMsIGNlbGxEZWxpbWl0ZXI6JywnLCBjYXN0OiBwcm0uY2FzdCB9KVswXVxuICAgIHJlcy5wdXNoIG9wZXJhdGlvblxuICAgIHJlcy5wdXNoIHJlY29yZFxuXG4gIHJldHVybiByZXNcblxuXG5cbiMgUmVhZGluZyBuZXh0IGNodW5rXG5yZWFkX2xpbmVzMiA9KGkpIC0+XG4gIHN0YXR1cyAncmVhZGluZyB0ZXh0J1xuICAjbmF2aWdhdG9yLnJlYWRMaW5lcyBpLCBsaW5lc19pbl9iYXRjaCwgIGxpbmVzUmVhZEhhbmRsZXJcbiAgbmF2aWdhdG9yLnJlYWRTb21lTGluZXMgaSwgIGxpbmVzUmVhZEhhbmRsZXIyXG4gIHJldHVyblxuXG5cbnNlbmRfanNvbl90b19zZXJ2ZXIyID0gKGluZGV4LCBsaW5lcywgZW9mLCBwcm9ncmVzcywganNvbikgLT5cbiAgaWYgaW5kZXg+bWF4X251bWJlcl9vZl9yZWNvcmRzXG4gICAgcmV0dXJuXG4gIGlmIGpzb24ubGVuZ3RoIGlzIDBcbiAgICByZXR1cm5cblxuICBzdGF0dXMgXCIje2pzb24ubGVuZ3RoLzJ9IHNlbmRpbmdcIlxuICBlc19jbGllbnQuYnVsayB7IGJvZHk6IGpzb24gfSwgKGVyciwgcmVzcCkgPT5cblxuICAgIGlmIGVyclxuICAgICAgY2xlYXIgd29ya2VyXG4gICAgICBhbGVydCBcIlNvcnJ5LCAje2Vyci5tZXNzYWdlfVwiXG4gICAgICBjb25zb2xlLmxvZyBlcnJcbiAgICAgIHJldHVyblxuICAgIGVsc2VcbiAgICAgIHN0YXR1cyBcIlwiXG4gICAgICBzaG93X3Byb2dyZXNzKHByb2dyZXNzLCBpbmRleCtqc29uLmxlbmd0aC8yKSAjIGxpbmVzLmxlbmd0aClcbiAgICAgICNjb25zb2xlLmxvZyBcIiAje2pzb24ubGVuZ3RoLzJ9IGxpbmVzIHNlbnRcIlxuICAgICAgXG4gICAgICBpZiBlb2ZcbiAgICAgICAgY2xlYXIgd29ya2VyXG4gICAgICAgIHJldHVyblxuICAgICAgIyBhZGRpbmcgbnVtYmVyIG9mIGxpbmVzIHJlYWQgdG8gZmlyc3QgbGluZSBpbiBjdXJyZW50IGNodW5rXG4gICAgICByZWFkX2xpbmVzMiBpbmRleCArIGpzb24ubGVuZ3RoLzIgI2xpbmVzLmxlbmd0aFxuICAgICAgcmV0dXJuXG4gICAgcmV0dXJuXG5cbiAgcmV0dXJuXG5cblxuXG4gIFxuIyB3b3JrcyB3aGVuIGEgbmV4dCBwb3J0aW9uIG9mIGZpbGUgaGFzIGJlZW4gcmVhZFxubGluZXNSZWFkSGFuZGxlcjIgPSAoZXJyLCBpbmRleCwgbGluZXMsIGVvZiwgcHJvZ3Jlc3MpIC0+XG4gIGlmIGVyclxuICAgIGNsZWFyIHdvcmtlclxuICAgIHJldHVyblxuICAgICAgICBcbiAgaWYgaW5kZXg+bWF4X251bWJlcl9vZl9yZWNvcmRzXG4gICAgY2xlYXIgd29ya2VyXG4gICAgcmV0dXJuXG4gIFxuICBzdGF0dXMgXCIje2xpbmVzLmxlbmd0aH0gY29udmVydGluZ1wiXG4gIHdvcmtlci5jb252ZXJ0X2xpbmVzX3RvX2pzb24yKHtcbiAgICBpbmRleDppbmRleCxcbiAgICBsaW5lczpsaW5lcyxcbiAgICBmaWVsZF9uYW1lczpmaWVsZF9uYW1lcyxcbiAgICBtYXhfbnVtYmVyX29mX3JlY29yZHM6bWF4X251bWJlcl9vZl9yZWNvcmRzLFxuICAgIGluZGV4X25hbWU6aW5kZXhfbmFtZSxcbiAgICB0eXBlX25hbWU6dHlwZV9uYW1lLFxuICAgIGNhc3Q6Y2FzdFxuICB9KVxuICAudGhlbiAoanNvbikgLT5cbiAgICBzZW5kX2pzb25fdG9fc2VydmVyMiBpbmRleCwgbGluZXMsIGVvZiwgcHJvZ3Jlc3MsIGpzb25cbiAgICByZXR1cm5cblxuICByZXR1cm5cblxuY2xlYXIgPSh3b3JrZXIpLT5cbiAgaWYgd29ya2VyXG4gICAgd29ya2VyLmNsb3NlKClcblxuXG5cbiMgcmV0dXJucyBhcnJheSBvZiBmZWlsZCB0eXBlcyB0byBzYXZlIGluIHRoZSBnbG9iYWwgY2FzdCB2YXJpYWJsZVxuZ2V0X2ZpZWxkX3R5cGVzID0oKSAtPlxuICBzZWxzID0kKCcudHlwZS1zZWxlY3RvcicpXG4gIHR5cGVzID0gKHNlbC52YWx1ZSBmb3Igc2VsIGluIHNlbHMpXG4gIHJldHVybiB0eXBlc1xuXG5cblxuIyBzdGFydHMgYWN0dWFsbHkgcmVhZCB0aGUgZmlsZSAgXG5yZWFkRmlsZSA9IC0+XG4gIGNsZWFyIHdvcmtlclxuICB3b3JrZXIgPSBjdyBjb252ZXJ0X2xpbmVzX3RvX2pzb24yOiBjb252ZXJ0X2xpbmVzX3RvX2pzb24yXG5cbiAgaG9zdHMgPSAkKCcjaG9zdHMnKS52YWwoKVxuICBpbmRleF9uYW1lID0gJCgnI2luZGV4TmFtZScpLnZhbCgpXG4gIHR5cGVfbmFtZSA9ICQoJyN0eXBlTmFtZScpLnZhbCgpXG5cbiAgZXNfY2xpZW50ID0gbmV3ICQuZXMuQ2xpZW50IGhvc3RzOiBob3N0c1xuICBcbiAgY2FzdCA9IGdldF9maWVsZF90eXBlcygpXG5cbiAgbmF2aWdhdG9yID0gbmV3IEZpbGVOYXZpZ2F0b3IoZmlsZSwgb3B0aW9ucylcbiAgcmVhZF9saW5lczIgMFxuICBcbiAgJCgnLnN0ZXAtNCcpLnNob3coKVxuICByZXR1cm5cblxuc3RhdHVzID0odGV4dCkgLT5cbiAgJCgnI3N0YXR1cycpLnRleHQodGV4dClcblxuIyBhc3NpZ24gaGFuZGxlcnMgdG8gVUkgXG4kKCcjY2hvb3NlRmlsZUJ1dHRvbicpLmNoYW5nZSA9PiBpbml0X3VpKClcbiQoJyNyZWFkRmlsZUJ1dHRvbicpLmNsaWNrID0+IHJlYWRGaWxlKClcblxuJCgnLnN0ZXAtMycpLmhpZGUoKVxuJCgnLnN0ZXAtNCcpLmhpZGUoKVxuXG5cbiJdfQ==
