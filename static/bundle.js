(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var FileNavigator;

FileNavigator = function(file, options) {
  var decode, getProgress, lastPosition, navigator, readChunk, self, size;
  self = this;
  size = file.size;
  file.navigator = this;
  lastPosition = 0;
  getProgress = function() {
    var progress;
    if (!size || size === 0) {
      return 0;
    }
    progress = parseInt(100 * lastPosition / size);
    if (progress > 100) {
      return 100;
    } else {
      return progress;
    }
  };
  readChunk = function(offset, length, callback) {
    var reader;
    lastPosition = offset + length;
    reader = new FileReader;
    reader.onloadend = function(progress) {
      var buffer;
      buffer = void 0;
      if (reader.result) {
        buffer = new Int8Array(reader.result, 0);
        buffer.slice = buffer.subarray;
      }
      callback(progress.err, buffer, progress.loaded);
    };
    reader.readAsArrayBuffer(file.slice(offset, offset + length));
  };
  decode = function(buffer, callback) {
    var reader;
    reader = new FileReader;
    reader.onloadend = function(progress) {
      callback(progress.currentTarget.result);
    };
    reader.readAsText(new Blob([buffer]));
  };
  navigator = new LineNavigator(readChunk, decode, options);
  self.getMilestones = navigator.getMilestones;
  self.readSomeLines = function(index, callback) {
    navigator.readSomeLines(index, function(err, index, lines, eof) {
      callback(err, index, lines, eof, getProgress());
    });
  };
  self.readLines = function(index, count, callback) {
    navigator.readLines(index, count, function(err, index, lines, eof) {
      callback(err, index, lines, eof, getProgress());
    });
  };
  self.find = navigator.find;
  self.findAll = navigator.findAll;
  self.getSize = function(callback) {
    return callback(file ? file.size : 0);
  };
};

module.exports = FileNavigator;



},{}],2:[function(require,module,exports){
var FileNavigator, build_head_table, cast, es_client, field_names, file, get_field_types, hosts, index_name, init_ui, linesReadHandler, lines_in_batch, max_number_of_records, navigator, options, prepare_json, readFile, read_lines, send_json_to_server, show_progress, type_name;

FileNavigator = require('./filenavigator.coffee');

hosts = "localhost:9200";

index_name = "govwiki";

type_name = "govs";

es_client = void 0;

field_names = [];

navigator = void 0;

file = void 0;

lines_in_batch = 10000;

max_number_of_records = 20000;

options = {
  chunkSize: 1024 * 1024 * 1
};

cast = void 0;

show_progress = function(progress, number) {
  var bar;
  bar = $(".progress-bar");
  bar.css("width", progress + "%");
  bar.text(progress + "%");
  $('#counter').text(number);
  return console.log(number + " : lines " + progress + "%");
};

build_head_table = function() {
  var container, head_navigator;
  container = $('#head_table_container');
  container.html("");
  head_navigator = new FileNavigator(file, {
    chunkSize: 1024 * 128
  });
  head_navigator.readLines(0, 3, function(err, index, lines, eof, progress) {
    var build_data_row, build_field_names_row, build_field_types_row, s;
    if (err) {
      return;
    }
    build_field_names_row = function(line) {
      var name, names, td;
      td = function(name) {
        return "<th>" + (name.replace(/"/g, '')) + "</th>";
      };
      names = line.split(',');
      return ((function() {
        var j, len, results;
        results = [];
        for (j = 0, len = names.length; j < len; j++) {
          name = names[j];
          results.push(td(name));
        }
        return results;
      })()).join("");
    };
    build_field_types_row = function(line) {
      var if_number, if_string, td, value, values;
      if_string = function(v) {
        if (!v) {
          return "selected";
        }
        if (('' + v).indexOf('"') > -1) {
          return "selected";
        }
        return "";
      };
      if_number = function(v) {
        if (if_string(v) === "selected") {
          return "";
        } else {
          return "selected";
        }
      };
      td = function(v) {
        return "<td>\n  <select class=\"type-selector\">\n    <option value=\"String\" " + (if_string(v)) + ">String</option>\n    <option value=\"Number\" " + (if_number(v)) + ">Number</option>\n    <option value=\"Boolean\">Boolean</option>\n  </select> \n</td>";
      };
      values = line.split(',');
      return ((function() {
        var j, len, results;
        results = [];
        for (j = 0, len = values.length; j < len; j++) {
          value = values[j];
          results.push(td(value));
        }
        return results;
      })()).join("");
    };
    build_data_row = function(line) {
      var td, value, values;
      td = function(v) {
        return "<td>" + v + "</td>";
      };
      values = line.split(',');
      return ((function() {
        var j, len, results;
        results = [];
        for (j = 0, len = values.length; j < len; j++) {
          value = values[j];
          results.push(td(value));
        }
        return results;
      })()).join("");
    };
    s = "<table style=\"border:1px solid silver;\">\n  <thead>\n    <tr>" + (build_field_names_row(lines[0])) + "</tr>\n    <tr>" + (build_field_types_row(lines[1])) + "</tr>\n  </thead>\n  <tbody>\n    <tr>" + (build_data_row(lines[1])) + "</tr>\n    <tr>" + (build_data_row(lines[2])) + "</tr>\n  </tbody>\n</table>";
    console.log(s);
    container.html(s);
  });
};

init_ui = function() {
  file = document.getElementById('chooseFileButton').files[0];
  show_progress(0, 0);
  return build_head_table();
};

prepare_json = function(index, lines) {
  var field_values, i, j, len, line, operation, record, res;
  if (!lines) {
    return;
  }
  res = [];
  if (index === 0) {
    field_names = lines[0].replace(/"/g, '').split(',');
    lines.shift();
  }
  for (i = j = 0, len = lines.length; j < len; i = ++j) {
    line = lines[i];
    if (index + i > max_number_of_records) {
      return res;
    }
    operation = {
      index: {
        _index: index_name,
        _type: type_name,
        _id: index + i
      }
    };
    field_values = line.split(',');
    record = CSV.parse(line, {
      header: field_names,
      cellDelimiter: ',',
      cast: cast
    })[0];
    res.push(operation);
    res.push(record);
  }
  return res;
};

read_lines = function(i) {
  navigator.readSomeLines(i, linesReadHandler);
};

send_json_to_server = function(index, lines, eof, progress, json) {
  if (index > max_number_of_records) {
    return;
  }
  if (json.length === 0) {
    return;
  }
  es_client.bulk({
    body: json
  }, (function(_this) {
    return function(err, resp) {
      if (err) {
        alert("Sorry, " + err.message);
        console.log(err);
        return;
      } else {
        show_progress(progress, index + json.length / 2);
        console.log(" " + (json.length / 2) + " lines sent");
        if (eof) {
          return;
        }
        read_lines(index + json.length / 2);
        return;
      }
    };
  })(this));
};

linesReadHandler = function(err, index, lines, eof, progress) {
  var json;
  if (err) {
    return;
  }
  if (index > max_number_of_records) {
    return;
  }
  json = prepare_json(index, lines);
  send_json_to_server(index, lines, eof, progress, json);
};

get_field_types = function() {
  var sel, sels, types;
  sels = $('.type-selector');
  types = (function() {
    var j, len, results;
    results = [];
    for (j = 0, len = sels.length; j < len; j++) {
      sel = sels[j];
      results.push(sel.value);
    }
    return results;
  })();
  return types;
};

readFile = function() {
  hosts = $('#hosts').val();
  index_name = $('#indexName').val();
  type_name = $('#typeName').val();
  es_client = new $.es.Client({
    hosts: hosts
  });
  cast = get_field_types();
  navigator = new FileNavigator(file, options);
  read_lines(0);
};

$('#chooseFileButton').change((function(_this) {
  return function() {
    return init_ui();
  };
})(this));

$('#readFileButton').click((function(_this) {
  return function() {
    return readFile();
  };
})(this));



},{"./filenavigator.coffee":1}]},{},[2])
//# sourceMappingURL=data:application/json;base64,
